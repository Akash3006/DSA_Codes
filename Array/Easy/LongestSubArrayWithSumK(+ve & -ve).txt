//Time Complexity - O(n)

int getLongestSubarray(vector<int>& nums, int k){
    // Write your code here
    map<long long,int> prefixSum;
    int maxLen = 0;
    long long sum = 0;
    int n = nums.size();
    for(int i =0;i<n;i++)
        {
            sum+=nums[i];

            //Edge Case if the sum found at first index
            if(sum == k)
                maxLen = max(maxLen,i+1);

            if(prefixSum.find(sum - k)!=prefixSum.end())
                {
                    maxLen = max(maxLen,i - prefixSum[sum-k]);
                }
            if(prefixSum.find(sum)==prefixSum.end())
                prefixSum[sum] = i;
        }

    return maxLen;
}