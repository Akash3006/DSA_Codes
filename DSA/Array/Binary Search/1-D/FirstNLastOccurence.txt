//Time Complexity - O(2logn)

int firstOrLastOccurence(vector<int> &arr, int n, int k, bool first){
    
    int low,high,mid,index;
    low = 0,high = n-1,index = -1;
    while(low<=high)
    {
        mid = low + (high - low)/2;

        if(arr[mid] == k)
            {
                index = mid;

                if(!first)
                    low = mid + 1;
                else
                    high = mid -1;

            }
        else if( arr[mid] > k)
            high = mid -1;
        else 
            low = mid +1;
    }

    return index;

}



pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    
    pair<int,int> result;
    result.first = firstOrLastOccurence();
    result.second = firstOrLastOccurence();
    return result;
}